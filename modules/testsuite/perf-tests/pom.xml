<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <name>JBoss Web Services - Stack CXF Performance Tests</name>
  <artifactId>jbossws-cxf-performance-tests</artifactId>
  <packaging>jar</packaging>
  
  <!-- Parent -->
  <parent>
    <groupId>org.jboss.ws.cxf</groupId>
    <artifactId>jbossws-cxf-testsuite</artifactId>
    <version>5.4.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  
  <properties>
    <jmeter.version>2.13</jmeter.version>
    <jmeter.graph.plugin.version>0.1.0</jmeter.graph.plugin.version>
    <jmeter.plugin.version>1.10.1</jmeter.plugin.version>
  </properties>
  
  <dependencies>
    <dependency> <!-- Always make sure jbossws-cxf-factories dependency is explicitly declared before anything transitively pulling CXF -->
      <groupId>org.jboss.ws.cxf</groupId>
      <artifactId>jbossws-cxf-factories</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jboss.ws.cxf</groupId>
      <artifactId>jbossws-cxf-test-utils</artifactId>
      <version>${project.version}</version>
      <!-- <scope>test</scope> -->
    </dependency>
    <dependency>
      <groupId>org.jboss.ws.cxf</groupId>
      <artifactId>jbossws-cxf-server</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.picketlink</groupId>
      <artifactId>picketlink-common</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.picketlink</groupId>
      <artifactId>picketlink-federation</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
       <groupId>org.apache.derby</groupId>
       <artifactId>derby</artifactId>
       <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.jmeter</groupId>
      <artifactId>ApacheJMeter_java</artifactId>
      <version>${jmeter.version}</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>commons-math3</groupId>
          <artifactId>commons-math3</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-pool2</groupId>
          <artifactId>commons-pool2</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <!-- Profiles -->
  <profiles>
    
    <!-- 
    Name:  noprepare
    Descr: Skip test preparation with -Dnoprepare  
    -->
    <profile>
      <id>noprepare</id>
      <activation>
        <property>
          <name>!noprepare</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
            <executions>
              <execution>
                <id>testsuite-perf</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <scripts>
                    <script>file:///${basedir}/src/test/scripts/perf.groovy</script>
                  </scripts>
                  <properties>
                    <property>
                      <name>inputFile</name>
                      <value>${jboss.home}/standalone/configuration/standalone.xml</value>
                    </property>
                    <property>
                      <name>outputFile</name>
                      <value>${jboss.home}/standalone/configuration/jbws-testsuite-perf.xml</value>
                    </property>
                    <property>
                      <name>serverLog</name>
                      <value>jbws-testsuite-perf.log</value>
                    </property>
                  </properties>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>quiet</id>
      <activation>
        <property>
          <name>quiet</name>
        </property>
      </activation>
      <properties>
        <summariserInterval>180</summariserInterval>
        <summariserLog>false</summariserLog>
        <summariserOut>false</summariserOut>
      </properties>
    </profile>
    <profile>
      <id>notQuiet</id>
      <activation>
        <property>
          <name>!quiet</name>
        </property>
      </activation>
      <properties>
        <summariserInterval>60</summariserInterval>
        <summariserLog>true</summariserLog>
        <summariserOut>true</summariserOut>
      </properties>
    </profile>
    <profile>
      <id>basicPojoBench</id>
      <activation>
        <property>
          <name>!bench</name>
        </property>
      </activation>
      <properties>
        <benchFilter>basic-pojo</benchFilter>
      </properties>
    </profile>
    <profile>
      <id>customBench</id>
      <activation>
        <property>
          <name>bench</name>
        </property>
      </activation>
      <properties>
        <benchFilter>${bench}</benchFilter>
      </properties>
    </profile>

    <profile>
      <id>jmeter</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <id>default-jar</id>
                <goals>
                  <goal>test-jar</goal>
                </goals>
                <configuration>
                  <classifier>perftest</classifier>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>benchmarks</id>
                <phase>test-compile</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <property name="maven.test.classpath" refid="maven.test.classpath" />
                    <property name="tests.resources.dir" value="${basedir}/src/test/resources" />
                    <property name="tests.output.dir" value="${project.build.directory}" />
                    <property name="project.version" value="${project.version}" />
                    <property name="log4j.conf" value="${basedir}/src/test/etc/log4j.xml" />
                    <property name="log4j.output.dir" value="${log4j.output.dir}" />
                    <ant antfile="src/test/ant-import/build-jars-jaxws.xml" target="build-jars-jaxws" />
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-resources</id>
                <phase>validate</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/jmeter/lib</outputDirectory>
                  <resources>          
                    <resource>
                      <directory>src/test/etc</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>              
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>jboss-perf</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <!-- TODO revisit the values here... -->
<!--                  <jvmArgs>-server -agentpath:/home/alessio/jprofiler7/bin/linux-x64/libjprofilerti.so=offline,id=106 -Xms64m -Xmx512m -Djboss.socket.binding.port-offset=${port-offset.perf-tests.jboss} ${additionalJvmArgs}</jvmArgs> -->
                  <jvmArgs>-server -Xms64m -Xmx512m -Djboss.socket.binding.port-offset=${port-offset.perf-tests.jboss} ${additionalJvmArgs}</jvmArgs>
                  <serverConfig>jbws-testsuite-perf.xml</serverConfig>
                  <jbossHome>${jboss.home}</jbossHome>
                  <!-- TODO: add serverArgs section to use a custom bind address (requires wildfly-maven-plugin 1.1.0 +)
                       https://github.com/wildfly/wildfly-maven-plugin/commit/160b1a29f4e26fff9f60b7cb4c8e3c1b055c7300 -->
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-deploy1</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                  <force>true</force>
                  <targetDir>${project.build.directory}/test-libs</targetDir>
                  <filename>jaxws-benchmark-basic.jar</filename>
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-deploy2</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                  <force>true</force>
                  <targetDir>${project.build.directory}/test-libs</targetDir>
                  <filename>jaxws-benchmark-basicdoclit.jar</filename>
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-deploy3</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                  <force>true</force>
                  <targetDir>${project.build.directory}/test-libs</targetDir>
                  <filename>jaxws-benchmark-complex.jar</filename>
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-deploy4</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                  <force>true</force>
                  <targetDir>${project.build.directory}/test-libs</targetDir>
                  <filename>jaxws-benchmark-datatypes-ejb3.jar</filename>
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-deploy5</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                  <force>true</force>
                  <targetDir>${project.build.directory}/test-libs</targetDir>
                  <filename>jaxws-benchmark-datatypes-pojo.war</filename>
                </configuration>
              </execution>
              <execution>
                <id>jboss-perf-shutdown</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>shutdown</goal>
                </goals>
                <configuration>
                  <port>39990</port> <!-- Keep in sync with the port-offset -->
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.lazerycode.jmeter</groupId>
            <artifactId>jmeter-maven-plugin</artifactId>
            <version>${jmeter.plugin.version}</version>
            <executions>
              <execution>
                <id>jmeter-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>jmeter</goal>
                </goals>
                <configuration>
                    <jMeterProcessJVMSettings>
                        <arguments>
                            <argument>-Djboss.bind.address=${jboss.bind.address}</argument>
                        </arguments>
                    </jMeterProcessJVMSettings>
                    <!-- By default the test results are saved in a file /target/jmeter/results/<testname>-<timestamp>.jtl 
                         Further processing is easier without timestamp though. -->
                    <testResultsTimestamp>false</testResultsTimestamp>
                    <!-- By default, the console output during a jmeter test run is suppressed. 
                         We want to display the progress using the listener "Generate Summary Results" 
                         (which periodically prints stats to stdout). Therefore we have to make sure, 
                         that the jmeter output is not suppressed. -->
                    <suppressJMeterOutput>false</suppressJMeterOutput>
                    <!-- If tests fail (e.g. a http-request running into a timeout), the corresponding 
                         maven goal also fails (and subsequent goals aren't executed anymore). We 
                         want to create graphs from test-results, no matter if some requests failed 
                         or not, so we ignore jmeter failures. -->
                    <ignoreResultFailures>true</ignoreResultFailures>
                    <testFilesIncluded>
                      <jMeterTestFile>a-${benchFilter}.jmx</jMeterTestFile>
                      <jMeterTestFile>jbossws-${benchFilter}.jmx</jMeterTestFile>
                    </testFilesIncluded>
                    <!-- <overrideRootLogLevel>ERROR</overrideRootLogLevel> -->
                    <propertiesSystem>
                      <jbossws.integration.target>${jbossws.integration.target}</jbossws.integration.target>
                      <log4j.configuration>file://${basedir}/target/jmeter/lib/log4j.xml</log4j.configuration>
                    </propertiesSystem>
                    <propertiesJMeter>
                      <summariser.interval>${summariserInterval}</summariser.interval>
                      <summariser.log>${summariserLog}</summariser.log>
                      <summariser.out>${summariserOut}</summariser.out>
                    </propertiesJMeter>
                </configuration>
              </execution>
            </executions>
            <dependencies>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-factories</artifactId>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-server</artifactId>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-test-utils</artifactId>
                  <version>${project.version}</version>
                </dependency>
                 <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-performance-tests</artifactId>
                  <classifier>perftest</classifier>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>log4j</groupId>
                  <artifactId>log4j</artifactId>
                  <version>${log4j.version}</version>
                </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <!-- TODO replace with a custom plugin allowing generating CSV reports too -->
            <groupId>de.codecentric</groupId>
            <artifactId>jmeter-graph-maven-plugin</artifactId>
            <version>${jmeter.graph.plugin.version}</version>
            <executions>
              <execution>
                <id>create-graphs</id>
                <goals>
                  <goal>create-graph</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <inputFile>${project.build.directory}/jmeter/results/jbossws-${benchFilter}.jtl</inputFile>
                  <graphs>
                    <graph>
                      <pluginType>TransactionsPerSecond</pluginType>
                      <width>800</width>
                      <height>600</height>
                      <outputFile>${project.build.directory}/jmeter/results/TransactionsPerSecond.png</outputFile>
                    </graph>
                    <graph>
                      <pluginType>ResponseTimesOverTime</pluginType>
                      <width>800</width>
                      <height>600</height>
                      <outputFile>${project.build.directory}/jmeter/results/ResponseTimesOverTime.png</outputFile>
                    </graph>
                  </graphs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>jmeter-no-server</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <id>default-jar</id>
                <goals>
                  <goal>test-jar</goal>
                </goals>
                <configuration>
                  <classifier>perftest</classifier>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-resources</id>
                <phase>validate</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/jmeter/lib</outputDirectory>
                  <resources>          
                    <resource>
                      <directory>src/test/etc</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>              
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.lazerycode.jmeter</groupId>
            <artifactId>jmeter-maven-plugin</artifactId>
            <version>${jmeter.plugin.version}</version>
            <executions>
              <execution>
                <id>jmeter-tests</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>jmeter</goal>
                </goals>
                <configuration>
                    <jMeterProcessJVMSettings>
                        <arguments>
                            <argument>-Djboss.bind.address=${jboss.bind.address}</argument>
                        </arguments>
                    </jMeterProcessJVMSettings>
                    <!-- By default the test results are saved in a file /target/jmeter/results/<testname>-<timestamp>.jtl 
                         Further processing is easier without timestamp though. -->
                    <testResultsTimestamp>false</testResultsTimestamp>
                    <!-- By default, the console output during a jmeter test run is suppressed. 
                         We want to display the progress using the listener "Generate Summary Results" 
                         (which periodically prints stats to stdout). Therefore we have to make sure, 
                         that the jmeter output is not suppressed. -->
                    <suppressJMeterOutput>false</suppressJMeterOutput>
                    <!-- If tests fail (e.g. a http-request running into a timeout), the corresponding 
                         maven goal also fails (and subsequent goals aren't executed anymore). We 
                         want to create graphs from test-results, no matter if some requests failed 
                         or not, so we ignore jmeter failures. -->
                    <ignoreResultFailures>true</ignoreResultFailures>
                    <testFilesIncluded>
                      <jMeterTestFile>a-${benchFilter}.jmx</jMeterTestFile>
                      <jMeterTestFile>jbossws-${benchFilter}.jmx</jMeterTestFile>
                    </testFilesIncluded>
                    <!-- <overrideRootLogLevel>ERROR</overrideRootLogLevel> -->
                    <propertiesSystem>
                      <jbossws.integration.target>${jbossws.integration.target}</jbossws.integration.target>
                      <log4j.configuration>file://${basedir}/target/jmeter/lib/log4j.xml</log4j.configuration>
                    </propertiesSystem>
                    <propertiesJMeter>
                      <summariser.interval>${summariserInterval}</summariser.interval>
                      <summariser.log>${summariserLog}</summariser.log>
                      <summariser.out>${summariserOut}</summariser.out>
                    </propertiesJMeter>
                </configuration>
              </execution>
            </executions>
            <dependencies>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-factories</artifactId>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-server</artifactId>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-test-utils</artifactId>
                  <version>${project.version}</version>
                </dependency>
                 <dependency>
                  <groupId>org.jboss.ws.cxf</groupId>
                  <artifactId>jbossws-cxf-performance-tests</artifactId>
                  <classifier>perftest</classifier>
                  <version>${project.version}</version>
                </dependency>
                <dependency>
                  <groupId>log4j</groupId>
                  <artifactId>log4j</artifactId>
                  <version>${log4j.version}</version>
                </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <!-- TODO replace with a custom plugin allowing generating CSV reports too -->
            <groupId>de.codecentric</groupId>
            <artifactId>jmeter-graph-maven-plugin</artifactId>
            <version>${jmeter.graph.plugin.version}</version>
            <executions>
              <execution>
                <id>create-graphs</id>
                <goals>
                  <goal>create-graph</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <inputFile>${project.build.directory}/jmeter/results/jbossws-${benchFilter}.jtl</inputFile>
                  <graphs>
                    <graph>
                      <pluginType>TransactionsPerSecond</pluginType>
                      <width>800</width>
                      <height>600</height>
                      <outputFile>${project.build.directory}/jmeter/results/TransactionsPerSecond.png</outputFile>
                    </graph>
                    <graph>
                      <pluginType>ResponseTimesOverTime</pluginType>
                      <width>800</width>
                      <height>600</height>
                      <outputFile>${project.build.directory}/jmeter/results/ResponseTimesOverTime.png</outputFile>
                    </graph>
                  </graphs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  
</project>
