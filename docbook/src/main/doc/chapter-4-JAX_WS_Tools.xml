<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-3866751">
    
    <title>JAX-WS Tools</title>
    <para>The JAX-WS tools provided by JBossWS can be used in a variety of ways.  First we will look at server-side development strategies, and then  proceed to the client.</para>
    <section id="sid-3866751_JAX-WSTools-Serverside">
      
      <title>Server side</title>
      <para>
        When developing a Web Service  Endpoint (the server-side) you have the option of starting from Java  (
        <emphasis role="italics">bottom-up development</emphasis>
        ), or from the abstact contract (WSDL) that  defines your service (
        <emphasis role="italics">top-down development</emphasis>
        ). If this is a new service  (no existing contract), the bottom-up approach is the fastest route; you  only need to add a few annotations to your classes to get a service up  and running. However, if you are developing a service with an already  defined contract, it is far simpler to use the top-down approach, since  the provided tool will generate the annotated code for you.
      </para>
      <para>Bottom-up use cases:</para>
      <itemizedlist>
        <listitem>
          <para>Exposing an already existing EJB3 bean as a Web Service</para>
        </listitem>
        <listitem>
          <para>Providing a new service, and you want the contract to be generated for you</para>
        </listitem>
      </itemizedlist>
      <para>Top-down use cases:</para>
      <itemizedlist>
        <listitem>
          <para>Replacing the implementation of an existing Web Service, and you can't break compatibility with older clients</para>
        </listitem>
        <listitem>
          <para>Exposing a service that conforms to a contract specified by a third  party (e.g. a vender that calls you back using an already defined  protocol).</para>
        </listitem>
        <listitem>
          <para>Creating a service that adheres to the XML Schema and WSDL you developed by hand up front</para>
        </listitem>
      </itemizedlist>
      <para>The following JAX-WS command line tools are included in JBossWS:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <para>Command</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>wsprovide</para>
              </entry>
              <entry>
                <para>Generates JAX-WS portable artifacts, and provides the abstract contract. Used for bottom-up development.</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>wsconsume</para>
              </entry>
              <entry>
                <para>Consumes  the abstract contract (WSDL and Schema files), and produces artifacts  for both a server and client. Used for top-down and client development</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <section id="sid-3866751_JAX-WSTools-BottomUp%28Usingwsprovide%29">
        
        <title>Bottom-Up (Using wsprovide)</title>
        <para>The  bottom-up strategy involves developing the Java code for your service,  and then annotating it using JAX-WS annotations. These annotations can  be used to customize the contract that is generated for your service.  For example, you can change the operation name to map to anything you  like. However, all of the annotations have sensible defaults, so only  the @WebService annotation is required.</para>
        <para>This can be as simple as creating a single class:</para>
        <informalexample>
          <programlisting>package echo;

@javax.jws.WebService
public class Echo
{
   public String echo(String input)
   {
      return input;
   }
}</programlisting>
        </informalexample>
        <para>A  JSE or EJB3 deployment can be built using this class, and it is the  only Java code needed to deploy on JBossWS. The WSDL, and all other Java  artifacts called "wrapper classes" will be generated for you at deploy  time. This actually goes beyond the JAX-WS specification, which requires  that wrapper classes be generated using an offline tool. The reason for  this requirement is purely a vender implementation problem, and since  we do not believe in burdening a developer with a bunch of additional  steps, we generate these as well. However, if you want your deployment  to be portable to other application servers, you will unfortunately need  to use a tool and add the generated classes to your deployment.</para>
        <para>
          This is the primary purpose of the
          <emphasis role="italics">wsprovide</emphasis>
          tool,  to generate portable JAX-WS artifacts. Additionally, it can be used to  "provide" the abstract contract (WSDL file) for your service. This can  be obtained by invoking
          <emphasis role="italics">wsprovide</emphasis>
          using the "-w" option:
        </para>
        <informalexample>
          <programlisting>$ javac -d . Echo.java
$ wsprovide -w echo.Echo
Generating WSDL:
EchoService.wsdl
Writing Classes:
echo/jaxws/Echo.class
echo/jaxws/EchoResponse.class</programlisting>
        </informalexample>
        <para>
          Inspecting the WSDL reveals a service called
          <emphasis role="italics">EchoService</emphasis>
          :
        </para>
        <informalexample>
          <programlisting>&lt;service name='EchoService'&gt;
 &lt;port binding='tns:EchoBinding' name='EchoPort'&gt;
  &lt;soap:address location='REPLACE_WITH_ACTUAL_URL'/&gt;
 &lt;/port&gt;
&lt;/service&gt;</programlisting>
        </informalexample>
        <para>
          As expected, this service defines one operation, "
          <emphasis role="italics">echo</emphasis>
          ":
        </para>
        <informalexample>
          <programlisting>&lt;portType name='Echo'&gt;
 &lt;operation name='echo' parameterOrder='echo'&gt;
  &lt;input message='tns:Echo_echo'/&gt;
  &lt;output message='tns:Echo_echoResponse'/&gt;
 &lt;/operation&gt;
&lt;/portType&gt;</programlisting>
        </informalexample>
        <note>
          <para>Remember that when deploying on JBossWS you do not need to run this tool. You only need it for generating portable artifacts and/or the abstract contract for your service.</para>
        </note>
        <para>
          Let's create a POJO endpoint for deployment on JBoss AS. A simple
          <emphasis role="italics">web.xml</emphasis>
          needs to be created:
        </para>
        <informalexample>
          <programlisting>&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
  version="2.4"&gt;

  &lt;servlet&gt;
    &lt;servlet-name&gt;Echo&lt;/servlet-name&gt;
    &lt;servlet-class&gt;echo.Echo&lt;/servlet-class&gt;
  &lt;/servlet&gt;

  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;Echo&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/Echo&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</programlisting>
        </informalexample>
        <para>
          The
          <emphasis role="italics">web.xml</emphasis>
          and the single class can now be used to create a war:
        </para>
        <informalexample>
          <programlisting>$ mkdir -p WEB-INF/classes
$ cp -rp echo WEB-INF/classes/
$ cp web.xml WEB-INF
$ jar cvf echo.war WEB-INF
added manifest
adding: WEB-INF/(in = 0) (out= 0)(stored 0%)
adding: WEB-INF/classes/(in = 0) (out= 0)(stored 0%)
adding: WEB-INF/classes/echo/(in = 0) (out= 0)(stored 0%)
adding: WEB-INF/classes/echo/Echo.class(in = 340) (out= 247)(deflated 27%)
adding: WEB-INF/web.xml(in = 576) (out= 271)(deflated 52%)</programlisting>
        </informalexample>
        <para>The war can then be deployed to the JBoss Application Server.The war can then be deployed to the JBoss Application Server; this will internally invoke wsprovide,  which will generate the WSDL. If deployment was successful, and you are  using the default settings, it should be available in the server management console.</para>
        <para>For a portable JAX-WS deployment, the wrapper classes generated earlier could be added to the deployment.</para>
      </section>
      <section id="sid-3866751_JAX-WSTools-TopDown%28Usingwsconsume%29">
        
        <title>Down (Using wsconsume)</title>
        <para>
          The  top-down development strategy begins with the abstract contract for the  service, which includes the WSDL file and zero or more schema files.  The
          <emphasis role="italics">wsconsume</emphasis>
          tool is then used to consume this contract, and produce annotated Java classes (and optionally sources) that define it.
        </para>
        <note>
          <para>wsconsume may have problems with symlinks on Unix systems</para>
        </note>
        <para>
          Using  the WSDL file from the bottom-up example, a new Java implementation  that adheres to this service can be generated. The "-k" option is passed  to
          <emphasis role="italics">wsconsume</emphasis>
          to preserve the Java source files that are generated, instead of providing just classes:
        </para>
        <informalexample>
          <programlisting>$ wsconsume -k EchoService.wsdl
echo/Echo.java
echo/EchoResponse.java
echo/EchoService.java
echo/Echo_Type.java
echo/ObjectFactory.java
echo/package-info.java
echo/Echo.java
echo/EchoResponse.java
echo/EchoService.java
echo/Echo_Type.java
echo/ObjectFactory.java
echo/package-info.java</programlisting>
        </informalexample>
        <para>The following table shows the purpose of each generated file:</para>
        <informaltable>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>
                  <para>File</para>
                </entry>
                <entry>
                  <para>Purpose</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Echo.java</para>
                </entry>
                <entry>
                  <para>Service Endpoint Interface</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Echo_Type.java</para>
                </entry>
                <entry>
                  <para>Wrapper bean for request message</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EchoResponse.java</para>
                </entry>
                <entry>
                  <para>Wrapper bean for response message</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>ObjectFactory.java</para>
                </entry>
                <entry>
                  <para>JAXB XML Registry</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>package-info.java</para>
                </entry>
                <entry>
                  <para>Holder for JAXB package annotations</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>EchoService.java</para>
                </entry>
                <entry>
                  <para>Used only by JAX-WS clients</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>Examining  the Service Endpoint Interface reveals annotations that are more  explicit than in the class written by hand in the bottom-up example,  however, these evaluate to the same contract:</para>
        <informalexample>
          <programlisting>@WebService(name = "Echo", targetNamespace = "http://echo/")
public interface Echo {
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "echo", targetNamespace = "http://echo/", className = "echo.Echo_Type")
    @ResponseWrapper(localName = "echoResponse", targetNamespace = "http://echo/", className = "echo.EchoResponse")
    public String echo(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}</programlisting>
        </informalexample>
        <para>The only missing piece (besides for packaging) is the implementation class, which can now be written, using the above interface.</para>
        <informalexample>
          <programlisting>package echo;

@javax.jws.WebService(endpointInterface="echo.Echo")
public class EchoImpl implements Echo
{
   public String echo(String arg0)
   {
      return arg0;
   }
}
</programlisting>
        </informalexample>
      </section>
    </section>
    <section id="sid-3866751_JAX-WSTools-ClientSide">
      
      <title>Client Side</title>
      <para>
        Before  going to detail on the client-side it is important to understand the  decoupling concept that is central to Web Services. Web Services are not  the best fit for internal RPC, even though they can be used in this  way. There are much better technologies for this (CORBA, and RMI for  example). Web Services were designed specifically for interoperable  coarse-grained correspondence. There is no expectation or guarantee that  any party participating in a Web Service interaction will be at any  particular location, running on any particular OS, or written in any  particular programming language. So because of this, it is important to  clearly separate client and server implementations. The only thing they  should have in common is the abstract contract definition. If, for  whatever reason, your software does not adhere to this principal, then  you should not be using Web Services. For the above reasons, the
        <emphasis role="strong">
          <emphasis role="italics">recommended methodology for developing a client is</emphasis>
        </emphasis>
        to follow
        <emphasis role="strong">
          <emphasis role="italics">the top-down approach</emphasis>
        </emphasis>
        , even if the client is running on the same server.
      </para>
      <para>
        Let's repeat the process of the top-down section, although using the deployed WSDL, instead of the one generated offline by
        <emphasis role="italics">wsprovide</emphasis>
        .  The reason why we do this is just to get the right value for  soap:address. This value must be computed at deploy time, since it is  based on container configuration specifics. You could of course edit the  WSDL file yourself, although you need to ensure that the path is  correct.
      </para>
      <para>Offline version:</para>
      <informalexample>
        <programlisting>&lt;service name='EchoService'&gt;
  &lt;port binding='tns:EchoBinding' name='EchoPort'&gt;
   &lt;soap:address location='REPLACE_WITH_ACTUAL_URL'/&gt;
  &lt;/port&gt;
&lt;/service&gt;</programlisting>
      </informalexample>
      <para>Online version:</para>
      <informalexample>
        <programlisting>&lt;service name="EchoService"&gt;
  &lt;port binding="tns:EchoBinding" name="EchoPort"&gt;
    &lt;soap:address location="http://localhost.localdomain:8080/echo/Echo"/&gt;
  &lt;/port&gt;
&lt;/service&gt;
</programlisting>
      </informalexample>
      <para>
        Using the online deployed version with
        <emphasis role="italics">wsconsume</emphasis>
        :
      </para>
      <informalexample>
        <programlisting>$ wsconsume -k http://localhost:8080/echo/Echo?wsdl
echo/Echo.java
echo/EchoResponse.java
echo/EchoService.java
echo/Echo_Type.java
echo/ObjectFactory.java
echo/package-info.java
echo/Echo.java
echo/EchoResponse.java
echo/EchoService.java
echo/Echo_Type.java
echo/ObjectFactory.java
echo/package-info.java</programlisting>
      </informalexample>
      <para>
        The  one class that was not examined in the top-down section, was
        <code>EchoService.java</code>
        . Notice how it stores the location the WSDL was  obtained from.
      </para>
      <informalexample>
        <programlisting>@WebServiceClient(name = "EchoService", targetNamespace = "http://echo/", wsdlLocation = "http://localhost:8080/echo/Echo?wsdl")
public class EchoService extends Service
{
    private final static URL ECHOSERVICE_WSDL_LOCATION;

    static {
        URL url = null;
        try
        {
           url = new URL("http://localhost:8080/echo/Echo?wsdl");
        }
        catch (MalformedURLException e)
        {
           e.printStackTrace();
        }
        ECHOSERVICE_WSDL_LOCATION = url;
    }

    public EchoService(URL wsdlLocation, QName serviceName)
    {
         super(wsdlLocation, serviceName);
    }

    public EchoService()
    {
         super(ECHOSERVICE_WSDL_LOCATION, new QName("http://echo/", "EchoService"));
    }

    @WebEndpoint(name = "EchoPort")
    public Echo getEchoPort()
    {
         return (Echo)super.getPort(new QName("http://echo/", "EchoPort"), Echo.class);
    }
}</programlisting>
      </informalexample>
      <para>
        As  you can see, this generated class extends the main client entry point  in JAX-WS,
        <code>javax.xml.ws.Service</code>
        . While you can use
        <code>Service</code>
        directly,  this is far simpler since it provides the configuration info for you.  The only method we really care about is the
        <code>getEchoPort()</code>
        method, which  returns an instance of our Service Endpoint Interface. Any WS operation  can then be called by just invoking a method on the returned interface.
      </para>
      <note>
        <para>It's not recommended to refer to a remote WSDL URL in a production application. This causes network I/O every time you instantiate the Service Object. Instead, use the tool on a saved local copy, or use the URL version of the constructor to provide a new WSDL location.</para>
      </note>
      <para>All that is left to do, is write and compile the client:</para>
      <informalexample>
        <programlisting>import echo.*;

public class EchoClient
{
   public static void main(String args[])
   {
      if (args.length != 1)
      {
          System.err.println("usage: EchoClient &lt;message&gt;");
          System.exit(1);
      }

      EchoService service = new EchoService();
      Echo echo = service.getEchoPort();
      System.out.println("Server said: " + echo.echo(args0));
   }
}</programlisting>
      </informalexample>
      <para>
        It is easy to change the endpoint address of your operation at runtime, setting the
        <emphasis role="italics">ENDPOINT_ADDRESS_PROPERTY</emphasis>
        as shown below:
      </para>
      <informalexample>
        <programlisting>      EchoService service = new EchoService();
      Echo echo = service.getEchoPort();

      /* Set NEW Endpoint Location */
      String endpointURL = "http://NEW_ENDPOINT_URL";
      BindingProvider bp = (BindingProvider)echo;
      bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpointURL);

      System.out.println("Server said: " + echo.echo(args0));</programlisting>
      </informalexample>
      <section id="sid-3866751_JAX-WSTools-">
        
        <title/>
      </section>
    </section>
    <section id="sid-3866751_JAX-WSTools-JAXWSbindingcustomization">
      
      <title>WS binding customization</title>
      <para>An introduction to binding customizations:</para>
      <itemizedlist>
        <listitem>
          <para>
            <ulink url="http://java.sun.com/webservices/docs/2.0/jaxws/customizations.html"/>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="https://jax-ws.dev.java.net/source/browse/jax-ws/guide/docs/wsdl-customization.xsd?rev=1.2&amp;view=log">binding schema</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
            <ulink url="https://jax-ws.dev.java.net/nonav/guide/customizations/">xnsdoc</ulink>
          </para>
        </listitem>
      </itemizedlist>
      <para>The schema for the binding customization files can be found here:</para>
      <itemizedlist>
        <listitem>
          <para>
            <ulink url="https://jax-ws.dev.java.net/source/browse/jax-ws/guide/docs/wsdl-customization.xsd?rev=1.2&amp;view=log"/>
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="sid-3866762">
      
      <title>wsconsume</title>
      <para>
        <emphasis role="italics">wsconsume</emphasis>
        is a command line tool and ant task that "consumes" the  abstract contract (WSDL file) and produces portable JAX-WS service and  client artifacts.
      </para>
      <section id="sid-3866762_wsconsume-CommandLineTool">
        
        <title>Command Line Tool</title>
        <para>The command line tool has the following usage:</para>
        <informalexample>
          <programlisting>usage: wsconsume [options] &lt;wsdl-url&gt;
options:
  -h, --help                  Show this help message
  -b, --binding=&lt;file&gt;        One or more JAX-WS or JAXB binding files
  -k, --keep                  Keep/Generate Java source
  -c  --catalog=&lt;file&gt;        Oasis XML Catalog file for entity resolution
  -j  --clientjar=&lt;name&gt;      Create a jar file of the generated artifacts for calling the webservice
  -p  --package=&lt;name&gt;        The target package for generated source
  -w  --wsdlLocation=&lt;loc&gt;    Value to use for @WebServiceClient.wsdlLocation
  -o, --output=&lt;directory&gt;    The directory to put generated artifacts
  -s, --source=&lt;directory&gt;    The directory to put Java source
  -t, --target=&lt;2.1|2.2&gt;      The JAX-WS specification target
  -q, --quiet                 Be somewhat more quiet
  -v, --verbose               Show full exception stack traces
  -l, --load-consumer         Load the consumer and exit (debug utility)
  -e, --extension             Enable SOAP 1.2 binding extension
  -a, --additionalHeaders     Enables processing of implicit SOAP headers
  -d, --encoding=&lt;charset&gt;    The charset encoding to use for generated sources
  -n, --nocompile             Do not compile generated sources</programlisting>
        </informalexample>
        <para>
          
        </para>
        <important>
          <para>The wsdlLocation is used when creating the Service to be used by clients and will be added to the @WebServiceClient annotation, for an endpoint implementation based on the generated service endpoint interface you will need to manually add the wsdlLocation to the @WebService annotation on your web service implementation and not the service endpoint interface.</para>
        </important>
        <section id="sid-3866762_wsconsume-Examples">
          
          <title>Examples</title>
          <para>Generate artifacts in Java class form only:</para>
          <informalexample>
            <programlisting>wsconsume Example.wsdl</programlisting>
          </informalexample>
          <para>Generate source and class files:</para>
          <informalexample>
            <programlisting>wsconsume -k Example.wsdl</programlisting>
          </informalexample>
          <para>Generate source and class files in a custom directory:</para>
          <informalexample>
            <programlisting>wsconsume -k -o custom Example.wsdl</programlisting>
          </informalexample>
          <para>Generate source and class files in the org.foo package:</para>
          <informalexample>
            <programlisting>wsconsume -k -p org.foo Example.wsdl</programlisting>
          </informalexample>
          <para>Generate source and class files using multiple binding files:</para>
          <informalexample>
            <programlisting>wsconsume -k -b wsdl-binding.xml -b schema1-binding.xml -b schema2-binding.xml</programlisting>
          </informalexample>
        </section>
      </section>
      <section id="sid-3866762_wsconsume-MavenPlugin">
        
        <title>Maven Plugin</title>
        <para>
          The wsconsume tools is included in the
          <emphasis role="strong">org.jboss.ws.plugins:jaxws-tools-</emphasis>
          <emphasis role="strong">maven-</emphasis>
          <emphasis role="strong">plugin</emphasis>
          plugin. The plugin has two goals for running the tool,
          <emphasis role="italics">wsconsume</emphasis>
          and
          <emphasis role="italics">wsconsume-test</emphasis>
          , which basically do the same during different maven build phases (the former triggers the sources generation during
          <emphasis role="italics">generate-sources</emphasis>
          phase, the latter during the
          <emphasis role="italics">generate-test-sources</emphasis>
          one).
        </para>
        <para>
          The
          <emphasis role="italics">wsconsume</emphasis>
          plugin has the following parameters:
        </para>
        <informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>Attribute</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Default</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>bindingFiles</para>
                </entry>
                <entry>
                  <para>JAXWS or JAXB binding file</para>
                </entry>
                <entry>
                  <para>true</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>classpathElements</para>
                </entry>
                <entry>
                  <para>
                    Each classpathElement provides a
                    
                    library file to be added to classpath
                  </para>
                </entry>
                <entry>
                  <para>${project.compileClasspathElements}
or
${project.testClasspathElements}</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>catalog</para>
                </entry>
                <entry>
                  <para>Oasis XML Catalog file for entity resolution</para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>targetPackage</para>
                </entry>
                <entry>
                  <para>The target Java package for generated code.</para>
                </entry>
                <entry>
                  <para>generated</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>bindingFiles</para>
                </entry>
                <entry>
                  <para>One or more JAX-WS or JAXB binding file</para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>wsdlLocation</para>
                </entry>
                <entry>
                  <para>Value to use for @WebServiceClient.wsdlLocation</para>
                </entry>
                <entry>
                  <para>generated</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>outputDirectory</para>
                </entry>
                <entry>
                  <para>The output directory for generated artifacts.</para>
                </entry>
                <entry>
                  <para>${project.build.outputDirectory}
or
${project.build.testOutputDirectory}</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>sourceDirectory</para>
                </entry>
                <entry>
                  <para>The output directory for Java source.</para>
                </entry>
                <entry>
                  <para>${project.build.directory}/generated-sources/wsconsume</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>verbose</para>
                </entry>
                <entry>
                  <para>Enables more informational output about command progress.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>wsdls</para>
                </entry>
                <entry>
                  <para>The WSDL files or URLs to consume</para>
                </entry>
                <entry>
                  <para>n/a</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>extension</para>
                </entry>
                <entry>
                  <para>Enable SOAP 1.2 binding extension.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>encoding</para>
                </entry>
                <entry>
                  <para>The charset encoding to use for generated sources.</para>
                </entry>
                <entry>
                  <para>${project.build.sourceEncoding}</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>argLine</para>
                </entry>
                <entry>
                  <para>
                    An optional additional argline to be used when running in fork mode;
                    
                    can be used to set endorse dir, enable debugging, etc.
                    
                    
                    <emphasis role="strong">
                      <emphasis role="italics">Example</emphasis>
                    </emphasis>
                    
                    <code>&lt;argLine&gt;-Djava.endorsed.dirs=...&lt;/argLine&gt;</code>
                  </para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>fork</para>
                </entry>
                <entry>
                  <para>
                    Whether or not to run the generation task in a separate VM.
                    
                  </para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>target</para>
                </entry>
                <entry>
                  <para>A preference for the JAX-WS specification target</para>
                </entry>
                <entry>
                  <para>Depends on the underlying stack and endorsed dirs if any</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <section id="sid-3866762_wsconsume-Examplesx">
          
          <title>Examples</title>
          <para>
            You can use
            <emphasis role="italics">wsconsume</emphasis>
            in your own project build simply referencing the
            <emphasis role="italics">jaxws-tools-</emphasis>
            <emphasis role="italics">maven-</emphasis>
            <emphasis role="italics">plugin</emphasis>
            in the configured plugins in your pom.xml file.
          </para>
          <para>The  following example makes the plugin consume the test.wsdl file and  generate SEI and wrappers' java sources. The generated sources are then  compiled together with the other project classes.</para>
          <informalexample>
            <programlisting>
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jboss.ws.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;jaxws-tools-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.2.0.Final&lt;/version&gt;
      &lt;configuration&gt;
        &lt;wsdls&gt;
          &lt;wsdl&gt;${basedir}/test.wsdl&lt;/wsdl&gt;
        &lt;/wsdls&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;wsconsume&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</programlisting>
          </informalexample>
          <para>You can also specify multiple wsdl files, as well as force the target  package, enable SOAP 1.2 binding and turn the tool's verbose mode on:</para>
          <informalexample>
            <programlisting>
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jboss.ws.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;jaxws-tools-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.2.0.Final&lt;/version&gt;
      &lt;configuration&gt;
       &lt;wsdls&gt;
        &lt;wsdl&gt;${basedir}/test.wsdl&lt;/wsdl&gt;
        &lt;wsdl&gt;${basedir}/test2.wsdl&lt;/wsdl&gt;
       &lt;/wsdls&gt;
       &lt;targetPackage&gt;foo.bar&lt;/targetPackage&gt;
       &lt;extension&gt;true&lt;/extension&gt;
       &lt;verbose&gt;true&lt;/verbose&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;wsconsume&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</programlisting>
          </informalexample>
          <para>
            Finally,  if the wsconsume invocation is required for consuming a wsdl to be used  in your testsuite only, you might want to use the
            <emphasis role="italics">wsconsume-test</emphasis>
            goal as follows:
          </para>
          <informalexample>
            <programlisting>
&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jboss.ws.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;jaxws-tools-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.2.0.Final&lt;/version&gt;
      &lt;configuration&gt;
        &lt;wsdls&gt;
          &lt;wsdl&gt;${basedir}/test.wsdl&lt;/wsdl&gt;
        &lt;/wsdls&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;wsconsume-test&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;
</programlisting>
          </informalexample>
          <para>
            Plugin stack dependencyThe plugin itself does not have an explicit dependency to a JBossWS stack, as it's meant for being used with implementations of any supported version of the
            <emphasis role="italics">JBossWS SPI</emphasis>
            . So the user is expected to set a dependency in his own
            <code>pom.xml</code>
            to the desired
            <emphasis role="italics">JBossWS</emphasis>
            stack version. The plugin will rely on the that for using the proper tooling.
          </para>
          <informalexample>
            <programlisting>&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.jboss.ws.cxf&lt;/groupId&gt;
    &lt;artifactId&gt;jbossws-cxf-client&lt;/artifactId&gt;
    &lt;version&gt;5.1.0.Final&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
          </informalexample>
          <tip>
            <para>
              Be careful when using this plugin with the Maven War Plugin as that include any project dependency into the generated application war archive. You might want to set
              <code>&lt;scope&gt;provided&lt;/scope&gt;</code>
              for the
              <emphasis role="italics">JBossWS</emphasis>
              stack dependency to avoid that.
            </para>
          </tip>
          <important>
            <para>
              Up to version 1.1.2.Final, the
              <emphasis role="italics">artifactId</emphasis>
              of the plugin was
              <emphasis role="strong">maven-jaxws-tools-plugin</emphasis>
              .
            </para>
          </important>
        </section>
      </section>
      <section id="sid-3866762_wsconsume-AntTask">
        
        <title>Ant Task</title>
        <para>
          The
          <emphasis role="italics">wsconsume</emphasis>
          Ant task (
          <emphasis role="italics">org.jboss.ws.tools.ant.WSConsumeTask</emphasis>
          ) has the following attributes:
        </para>
        <informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>Attribute</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Default</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>fork</para>
                </entry>
                <entry>
                  <para>Whether or not to run the generation task in a separate VM.</para>
                </entry>
                <entry>
                  <para>true</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>keep</para>
                </entry>
                <entry>
                  <para>Keep/Enable Java source code generation.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>catalog</para>
                </entry>
                <entry>
                  <para>Oasis XML Catalog file for entity resolution</para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>package</para>
                </entry>
                <entry>
                  <para>The target Java package for generated code.</para>
                </entry>
                <entry>
                  <para>generated</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>binding</para>
                </entry>
                <entry>
                  <para>A JAX-WS or JAXB binding file</para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>wsdlLocation</para>
                </entry>
                <entry>
                  <para>Value to use for @WebServiceClient.wsdlLocation</para>
                </entry>
                <entry>
                  <para>generated</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>encoding</para>
                </entry>
                <entry>
                  <para>The charset encoding to use for generated sources</para>
                </entry>
                <entry>
                  <para>n/a</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>destdir</para>
                </entry>
                <entry>
                  <para>The output directory for generated artifacts.</para>
                </entry>
                <entry>
                  <para>"output"</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>sourcedestdir</para>
                </entry>
                <entry>
                  <para>The output directory for Java source.</para>
                </entry>
                <entry>
                  <para>value of destdir</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>target</para>
                </entry>
                <entry>
                  <para>The JAX-WS specification target. Allowed values are 2.0, 2.1 and 2.2</para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>verbose</para>
                </entry>
                <entry>
                  <para>Enables more informational output about command progress.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>wsdl</para>
                </entry>
                <entry>
                  <para>The WSDL file or URL</para>
                </entry>
                <entry>
                  <para>n/a</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>extension</para>
                </entry>
                <entry>
                  <para>Enable SOAP 1.2 binding extension.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>additionalHeaders</para>
                </entry>
                <entry>
                  <para>Enables processing of implicit SOAP headers</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <note>
          <para>Users also need to put streamBuffer.jar and stax-ex.jar to the classpath of the ant task to generate the appropriate artefacts.</para>
        </note>
        <note>
          <para>The wsdlLocation is used when creating the Service to be used by  clients and will be added to the @WebServiceClient annotation, for an  endpoint implementation based on the generated service endpoint  interface you will need to manually add the wsdlLocation to the  @WebService annotation on your web service implementation and not the  service endpoint interface.</para>
        </note>
        <para>
          
          Also, the following nested elements are supported:
        </para>
        <informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>Element</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Default</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>binding</para>
                </entry>
                <entry>
                  <para>A JAXWS or JAXB binding file</para>
                </entry>
                <entry>
                  <para>none</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>jvmarg</para>
                </entry>
                <entry>
                  <para>Allows setting of custom jvm arguments</para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <section id="sid-3866762_wsconsume-Examplesxx">
          
          <title>Examples</title>
          <para>Generate  JAX-WS source and classes in a separate JVM with separate directories, a  custom wsdl location attribute, and a list of binding files from  foo.wsdl:</para>
          <informalexample>
            <programlisting>
&lt;wsconsume
  fork="true"
  verbose="true"
  destdir="output"
  sourcedestdir="gen-src"
  keep="true"
  wsdllocation="handEdited.wsdl"
  wsdl="foo.wsdl"&gt;
  &lt;binding dir="binding-files" includes="*.xml" excludes="bad.xml"/&gt;
&lt;/wsconsume&gt;
</programlisting>
          </informalexample>
        </section>
      </section>
    </section>
    <section id="sid-3866758">
      
      <title>wsprovide</title>
      <para>
        <emphasis role="italics">wsprovide</emphasis>
        is a command line tool, Maven plugin and Ant task that generates portable  JAX-WS artifacts for a service endpoint implementation. It also has the  option to "provide" the abstract contract for offline usage.
      </para>
      <section id="sid-3866758_wsprovide-CommandLineTool">
        
        <title>Command Line Tool</title>
        <para>The command line tool has the following usage:</para>
        <informalexample>
          <programlisting>usage: wsprovide [options] &lt;endpoint class name&gt;
options:
  -h, --help                  Show this help message
  -k, --keep                  Keep/Generate Java source
  -w, --wsdl                  Enable WSDL file generation
  -a, --address               The generated port soap:address in wsdl
  -c. --classpath=&lt;path&gt;      The classpath that contains the endpoint
  -o, --output=&lt;directory&gt;    The directory to put generated artifacts
  -r, --resource=&lt;directory&gt;  The directory to put resource artifacts
  -s, --source=&lt;directory&gt;    The directory to put Java source
  -e, --extension             Enable SOAP 1.2 binding extension
  -q, --quiet                 Be somewhat more quiet
  -t, --show-traces           Show full exception stack traces</programlisting>
        </informalexample>
        <section id="sid-3866758_wsprovide-Examples">
          
          <title>Examples</title>
          <para>Generating wrapper classes for portable artifacts in the "generated" directory:</para>
          <informalexample>
            <programlisting>wsprovide -o generated foo.Endpoint</programlisting>
          </informalexample>
          <para>Generating wrapper classes and WSDL in the "generated" directory</para>
          <informalexample>
            <programlisting>wsprovide -o generated -w foo.Endpoint</programlisting>
          </informalexample>
          <para>Using an endpoint that references other jars</para>
          <informalexample>
            <programlisting>wsprovide -o generated -c application1.jar:application2.jar foo.Endpoint</programlisting>
          </informalexample>
        </section>
      </section>
      <section id="sid-3866758_wsprovide-MavenPlugin">
        
        <title>Maven Plugin</title>
        <para>
          The
          <emphasis role="italics">wsprovide</emphasis>
          tools is included in the
          <emphasis role="strong">org.jboss.ws.plugins:jaxws-tools-</emphasis>
          <emphasis role="strong">maven-</emphasis>
          <emphasis role="strong">plugin</emphasis>
          plugin. The plugin has two goals for running the tool,
          <emphasis role="italics">wsprovide</emphasis>
          and
          <emphasis role="italics">wsprovide-test</emphasis>
          , which basically do the same during different Maven build phases (the former triggers the sources generation during
          <emphasis role="italics">process-classes</emphasis>
          phase, the latter during the
          <emphasis role="italics">process-test-classes</emphasis>
          one).
        </para>
        <para>
          The
          <emphasis role="italics">wsprovide</emphasis>
          plugin has the following parameters:
        </para>
        <informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>Attribute</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Default</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>testClasspathElements</para>
                </entry>
                <entry>
                  <para>
                    Each classpathElement provides a
                    
                    library file to be added to classpath
                  </para>
                </entry>
                <entry>
                  <para>${project.compileClasspathElements}
or
${project.testClasspathElements}</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>outputDirectory</para>
                </entry>
                <entry>
                  <para>The output directory for generated artifacts.</para>
                </entry>
                <entry>
                  <para>${project.build.outputDirectory}
or
${project.build.testOutputDirectory}</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>resourceDirectory</para>
                </entry>
                <entry>
                  <para>The output directory for resource artifacts (WSDL/XSD).</para>
                </entry>
                <entry>
                  <para>${project.build.directory}/wsprovide/resources</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>sourceDirectory</para>
                </entry>
                <entry>
                  <para>The output directory for Java source.</para>
                </entry>
                <entry>
                  <para>${project.build.directory}/wsprovide/java</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>extension</para>
                </entry>
                <entry>
                  <para>Enable SOAP 1.2 binding extension.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>generateWsdl</para>
                </entry>
                <entry>
                  <para>Whether or not to generate WSDL.</para>
                </entry>
                <entry>
                  <para>
                    false
                    
                  </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>verbose</para>
                </entry>
                <entry>
                  <para>Enables more informational output about command progress.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>portSoapAddress</para>
                </entry>
                <entry>
                  <para>The generated port soap:address in the WSDL</para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis role="strong">endpointClass</emphasis>
                  </para>
                </entry>
                <entry>
                  <para>
                    <emphasis role="strong">Service Endpoint Implementation.</emphasis>
                  </para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <section id="sid-3866758_wsprovide-Examplesx">
          
          <title>Examples</title>
          <para>
            You can use
            <emphasis role="italics">wsprovide</emphasis>
            in your own project build simply referencing the
            <emphasis role="italics">jaxws-tools-</emphasis>
            <emphasis role="italics">maven-</emphasis>
            <emphasis role="italics">plugin</emphasis>
            in the configured plugins in your
            <emphasis role="italics">pom.xml</emphasis>
            file.
          </para>
          <para>The following example makes the plugin provide the wsdl file and artifact sources for the specified endpoint class:</para>
          <informalexample>
            <programlisting>&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jboss.ws.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;jaxws-tools-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.2.0.Final&lt;/version&gt;
      &lt;configuration&gt;
        &lt;verbose&gt;true&lt;/verbose&gt;
        &lt;endpointClass&gt;org.jboss.test.ws.plugins.tools.wsprovide.TestEndpoint&lt;/endpointClass&gt;
        &lt;generateWsdl&gt;true&lt;/generateWsdl&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;wsprovide&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>
          </informalexample>
          <para>The following example does the same, but is meant for use in your own testsuite:</para>
          <informalexample>
            <programlisting>&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jboss.ws.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;jaxws-tools-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.2.0.Final&lt;/version&gt;
      &lt;configuration&gt;
        &lt;verbose&gt;true&lt;/verbose&gt;
        &lt;endpointClass&gt;org.jboss.test.ws.plugins.tools.wsprovide.TestEndpoint2&lt;/endpointClass&gt;
        &lt;generateWsdl&gt;true&lt;/generateWsdl&gt;
      &lt;/configuration&gt;
      &lt;executions&gt;
        &lt;execution&gt;
          &lt;goals&gt;
            &lt;goal&gt;wsprovide-test&lt;/goal&gt;
          &lt;/goals&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>
          </informalexample>
          <para>
            Plugin stack dependencyThe plugin itself does not have an explicit dependency to a JBossWS stack, as it's meant for being used with implementations of any supported version of the
            <emphasis role="italics">JBossWS SPI</emphasis>
            . So the user is expected to set a dependency in his own
            <code>pom.xml</code>
            to the desired
            <emphasis role="italics">JBossWS</emphasis>
            stack version. The plugin will rely on the that for using the proper tooling.
          </para>
          <informalexample>
            <programlisting>&lt;dependencies&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.jboss.ws.cxf&lt;/groupId&gt;
    &lt;artifactId&gt;jbossws-cxf-client&lt;/artifactId&gt;
    &lt;version&gt;5.1.0.Final&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
          </informalexample>
          <tip>
            <para>
              Be careful when using this plugin with the Maven War Plugin as that include any project dependency into the generated application war archive. You might want to set
              <code>&lt;scope&gt;provided&lt;/scope&gt;</code>
              for the
              <emphasis role="italics">JBossWS</emphasis>
              stack dependency to avoid that.
            </para>
          </tip>
          <important>
            <para>
              Up to version 1.1.2.Final, the
              <emphasis role="italics">artifactId</emphasis>
              of the plugin was
              <emphasis role="strong">maven-jaxws-tools-plugin</emphasis>
              .
            </para>
          </important>
        </section>
      </section>
      <section id="sid-3866758_wsprovide-AntTask">
        
        <title>Ant Task</title>
        <para>
          The wsprovide ant task (
          <emphasis role="italics">org.jboss.ws.tools.ant.WSProvideTask</emphasis>
          ) has the following attributes:
        </para>
        <informaltable>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <para>Attribute</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Default</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>fork</para>
                </entry>
                <entry>
                  <para>Whether or not to run the generation task in a separate VM.</para>
                </entry>
                <entry>
                  <para>true</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>keep</para>
                </entry>
                <entry>
                  <para>Keep/Enable Java source code generation.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>destdir</para>
                </entry>
                <entry>
                  <para>The output directory for generated artifacts.</para>
                </entry>
                <entry>
                  <para>"output"</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>resourcedestdir</para>
                </entry>
                <entry>
                  <para>The output directory for resource artifacts (WSDL/XSD).</para>
                </entry>
                <entry>
                  <para>value of destdir</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>sourcedestdir</para>
                </entry>
                <entry>
                  <para>The output directory for Java source.</para>
                </entry>
                <entry>
                  <para>value of destdir</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>extension</para>
                </entry>
                <entry>
                  <para>Enable SOAP 1.2 binding extension.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>genwsdl</para>
                </entry>
                <entry>
                  <para>Whether or not to generate WSDL.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    address
                    
                  </para>
                </entry>
                <entry>
                  <para>
                    The generated port soap:address in wsdl.
                    
                  </para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>verbose</para>
                </entry>
                <entry>
                  <para>Enables more informational output about command progress.</para>
                </entry>
                <entry>
                  <para>false</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>
                    <emphasis role="strong">sei</emphasis>
                  </para>
                </entry>
                <entry>
                  <para>
                    <emphasis role="strong">Service Endpoint Implementation.</emphasis>
                  </para>
                </entry>
                <entry>
                  <para> </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>classpath</para>
                </entry>
                <entry>
                  <para>The classpath that contains the service endpoint implementation.</para>
                </entry>
                <entry>
                  <para>"."</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <section id="sid-3866758_wsprovide-Examplesxx">
          
          <title>Examples</title>
          <para>Executing wsprovide in verbose mode with separate output directories for source, resources, and classes:</para>
          <informalexample>
            <programlisting>&lt;target name="test-wsproivde" depends="init"&gt;
  &lt;taskdef name="wsprovide" classname="org.jboss.ws.tools.ant.WSProvideTask"&gt;
    &lt;classpath refid="core.classpath"/&gt;
  &lt;/taskdef&gt;
  &lt;wsprovide
    fork="false"
    keep="true"
    destdir="out"
    resourcedestdir="out-resource"
    sourcedestdir="out-source"
    genwsdl="true"
    verbose="true"
    sei="org.jboss.test.ws.jaxws.jsr181.soapbinding.DocWrappedServiceImpl"&gt;
    &lt;classpath&gt;
      &lt;pathelement path="${tests.output.dir}/classes"/&gt;
    &lt;/classpath&gt;
  &lt;/wsprovide&gt;
&lt;/target&gt;</programlisting>
          </informalexample>
        </section>
      </section>
    </section>
  </chapter>
